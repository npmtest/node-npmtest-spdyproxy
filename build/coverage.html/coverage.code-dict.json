{"/home/travis/build/npmtest/node-npmtest-spdyproxy/test.js":"/* istanbul instrument in package npmtest_spdyproxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spdyproxy/lib.npmtest_spdyproxy.js":"/* istanbul instrument in package npmtest_spdyproxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_spdyproxy = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_spdyproxy = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-spdyproxy/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-spdyproxy && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_spdyproxy */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_spdyproxy\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_spdyproxy.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_spdyproxy.rollup.js'] =\n            local.assetsDict['/assets.npmtest_spdyproxy.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_spdyproxy.__dirname + '/lib.npmtest_spdyproxy.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-spdyproxy/node_modules/spdyproxy/lib/server.js":"var spdy = require('spdy'),\n    http = require('http'),\n    path = require('path'),\n    util = require('util'),\n    net = require('net'),\n    url = require('url'),\n    fs = require('fs');\n\nvar SPDYProxy = function(options) {\n  var self = this;\n\n  this.setAuthHandler = function(handler) {\n    self._authHandler = handler;\n    console.log('AuthHandler'.green, handler.friendly_name.yellow,\n                'will be used.'.green);\n  }\n\n  this.setLogHandler = function(handler) {\n    self._logHandler = handler;\n    console.log('Requests will be logged into file'.green, handler._filename.yellow);\n  }\n\n  function logRequest(req) {\n    console.log(req.method.green + ' ' + req.url.yellow);\n    for (var i in req.headers)\n      console.log(' > '.grey + i.cyan + ': ' + req.headers[i]);\n    console.log();\n  }\n\n  function synReply(socket, code, reason, headers, cb) {\n    try {\n      // SPDY socket\n      if(socket._lock){\n        socket._lock(function() {\n          var socket = this;\n          this._spdyState.framer.replyFrame(\n            this._spdyState.id, code, reason, headers,\n            function (err, frame) {\n              socket.connection.write(frame);\n              socket._unlock();\n              cb.call();\n            }\n          );\n        });\n\n      // Chrome used raw SSL instead of SPDY when issuing CONNECT for\n      // WebSockets. Hence, to support WS we must fallback to regular\n      // HTTPS tunelling: https://github.com/igrigorik/node-spdyproxy/issues/26\n      } else {\n        var statusLine = 'HTTP/1.1 ' + code + ' ' + reason + '\\r\\n';\n        var headerLines = '';\n        for(key in headers){\n            headerLines += key + ': ' + headers[key] + '\\r\\n';\n        }\n        socket.write(statusLine + headerLines + '\\r\\n', 'UTF-8', cb);\n      }\n    } catch(error) {\n      cb.call();\n    }\n  }\n\n  function handlePlain(req, res) {\n    var path = req.headers.path || url.parse(req.url).path;\n    var requestOptions = {\n      host: req.headers.host.split(':')[0],\n      port: req.headers.host.split(':')[1] || 80,\n      path: path,\n      method: req.method,\n      headers: req.headers\n    };\n    if (options.localAddress) {\n      requestOptions.localAddress = options.localAddress;\n    }\n\n    var rreq = http.request(requestOptions, function(rres) {\n      rres.headers['proxy-agent'] = 'SPDY Proxy ' + options.version;\n\n      // write out headers to handle redirects\n      res.writeHead(rres.statusCode, '', rres.headers);\n      rres.pipe(res);\n\n      // Res could not write, but it could close connection\n      res.pipe(rres);\n    });\n\n    rreq.on('error', function(e) {\n      console.log(\"Client error: \" + e.message);\n      res.writeHead(502, 'Proxy fetch failed');\n      res.end();\n    });\n\n    req.pipe(rreq);\n\n    // Just in case if socket will be shutdown before http.request will connect\n    // to the server.\n    res.on('close', function() {\n      rreq.abort();\n    });\n  }\n\n  function handleSecure(req, socket) {\n    var requestOptions = {\n      host: req.url.split(':')[0],\n      port: req.url.split(':')[1] || 443,\n    };\n    if (options.localAddress) {\n      requestOptions.localAddress = options.localAddress;\n    }\n\n    var tunnel = net.createConnection(requestOptions, function() {\n      synReply(socket, 200, 'Connection established',\n        {\n          'Connection': 'keep-alive',\n          'Proxy-Agent': 'SPDY Proxy ' + options.version\n        },\n        function() {\n          tunnel.pipe(socket);\n          socket.pipe(tunnel);\n        }\n      );\n    });\n\n    tunnel.setNoDelay(true);\n\n    tunnel.on('error', function(e) {\n      console.log(\"Tunnel error: \".red + e);\n      synReply(socket, 502, \"Tunnel Error\", {}, function() {\n        socket.end();\n      });\n    });\n  }\n\n  function handleRequest(req, res) {\n    var socket = (req.method == 'CONNECT') ? res : res.socket;\n    console.log(\"%s:%s\".yellow + \" - %s - \" + \"stream ID: \" + \"%s\".yellow + \" - priority: \" + \"%s\".yellow,\n      socket.connection ? socket.connection.socket.remoteAddress : socket.socket.remoteAddress,\n      socket.connection ? socket.connection.socket.remotePort : socket.socket.remotePort,\n      req.method, res.id || (socket._spdyState && socket._spdyState.id) || \"none\",\n      res.priority || (socket._spdyState && socket._spdyState.priority) || \"none\"\n    );\n\n    // node-spdy forces chunked-encoding processing on inbound\n    // requests without a content-length. However, we don't want\n    // want to pass this injected header through to the destination.\n    delete req.headers['transfer-encoding'];\n\n    var dispatcher = function(req, res) {\n      req.method == 'CONNECT' ? handleSecure(req, res) : handlePlain(req, res);\n    }\n\n    if (options.verbose) logRequest(req);\n\n    if(typeof self._logHandler == 'object') {\n      self._logHandler.log(socket, req);\n    }\n\n    if(typeof self._authHandler == 'object') { // an AuthHandler is defined\n      // perform basic proxy auth (over established SSL tunnel)\n      // - http://www.chromium.org/spdy/spdy-authentication\n      var header = req.headers['proxy-authorization'] || '',\n          token = header.split(/\\s+/).pop() || '',\n          auth = new Buffer(token, 'base64').toString(),\n          parts = auth.split(/:/),\n          username = parts[0],\n          password = parts[1];\n\n      // don't pass proxy-auth headers upstream\n      delete req.headers['proxy-authorization'];\n\n      self._authHandler.authUser(username, password, function(authPassed) {\n        if (authPassed)\n          return dispatcher(req, res);\n\n        synReply(socket, 407, 'Proxy Authentication Required',\n          {'proxy-authenticate': 'Basic realm=\"SPDY Proxy\"'},\n          function() {\n            socket.end();\n          }\n        );\n      });\n    } else { // auth is not necessary, simply go ahead and dispatch to funcs\n      dispatcher(req, res);\n    }\n\n  }\n\n  spdy.server.Server.call(this, options);\n\n  this.on(\"connect\", handleRequest);\n  this.on(\"request\", handleRequest);\n};\n\nutil.inherits(SPDYProxy, spdy.server.Server);\n\nvar createServer = function(options) {\n  return new SPDYProxy(options);\n};\n\nexports.SPDYProxy = SPDYProxy;\nexports.createServer = createServer;\n","/home/travis/build/npmtest/node-npmtest-spdyproxy/node_modules/spdyproxy/lib/cmdpwdhelper.js":"function CmdPwdHelper(correct_user, correct_pass) {\n  this.friendly_name = \"cmdline password authenticator\";\n  this._correct_user = correct_user;\n  this._correct_pass = correct_pass;\n}\n\nCmdPwdHelper.prototype.authUser = function(username, password, callback) {\n  callback(this._correct_user == username && this._correct_pass == password);\n};\n\nmodule.exports = CmdPwdHelper;\n","/home/travis/build/npmtest/node-npmtest-spdyproxy/node_modules/spdyproxy/lib/logginghelper.js":"var fs = require('fs');\n\nfunction LoggingHelper(filename) {\n\tthis._filename = filename;\n\ttime = dateFormat(new Date (), \"%Y-%m-%d %H:%M:%S\", false);\n\tfs.appendFile(filename, time + ' node-spdyproxy is now running\\n', function (err) {\n\t\tif (err) {\n\t\t\tthrow err;\n\t\t\tprocess.exit();\n\t\t}\n\t});\n}\n\nfunction dateFormat (date, fstr, utc) {\n  utc = utc ? 'getUTC' : 'get';\n  return fstr.replace (/%[YmdHMS]/g, function (m) {\n    switch (m) {\n    case '%Y': return date[utc + 'FullYear'] (); // no leading zeros required\n    case '%m': m = 1 + date[utc + 'Month'] (); break;\n    case '%d': m = date[utc + 'Date'] (); break;\n    case '%H': m = date[utc + 'Hours'] (); break;\n    case '%M': m = date[utc + 'Minutes'] (); break;\n    case '%S': m = date[utc + 'Seconds'] (); break;\n    default: return m.slice (1); // unknown code, remove %\n    }\n    // add leading zero if required\n    return ('0' + m).slice (-2);\n  });\n}\n/* dateFormat (new Date (), \"%Y-%m-%d %H:%M:%S\", true) returns \n   \"2012-05-18 05:37:21\"  */\n\nLoggingHelper.prototype.log = function(socket, req) {\n\tvar addr = socket.connection ? socket.connection.socket.remoteAddress : socket.socket.remoteAddress;\n\ttime = dateFormat(new Date (), \"%Y-%m-%d %H:%M:%S\", false);\n\tlogstring = time + \" \" + addr + \" \" + req.method;\n\tlogstring += (req.method == 'CONNECT')?(\" \\\"\" + req.url + \"\\\"\"):(\" \\\"\" + req.headers['host'] + \"\\\" \\\"\" + req.url + \"\\\"\");\n\tlogstring += \"\\n\";\n\n\tfs.appendFile(this._filename, logstring, function (err) {\n\t\tif (err) {\n\t\t\tthrow err;\n\t\t}\n\t});\n}\n\nmodule.exports = LoggingHelper;\n","/home/travis/build/npmtest/node-npmtest-spdyproxy/node_modules/spdyproxy/lib/radiushelper.js":"var util = require('util'),\n    cache = require('memory-cache'),\n    radius = require('radius'),\n    dgram = require('dgram'),\n    EventEmitter = require('events').EventEmitter;\n\nfunction RADIUSHelper(server, port, secret, nasid, cred_ttl, verbose) {\n  this.friendly_name = \"RADIUS remote authenticator\";\n  this._verbose = verbose;\n\n  this._server = server;\n  this._port = port;\n  this._secret = secret;\n  this._nasid = nasid;\n  this._creds_ttl = cred_ttl;\n\n  this._authPacketId = 0;\n  this._authCallbacks = {};\n  this._authReadyNotify = new EventEmitter();\n  this._authReadyNotify.setMaxListeners(100);\n}\n\nRADIUSHelper.prototype.authUser = function(username, password, callback) {\n  self = this;\n\n  if (username.length == 0 || password.length == 0){\n    this._authReadyNotify.emit(username, true);\n    callback(false);\n    return;\n  }\n\n  if (cached_user = cache.get(username)) { // cache available\n    if (this._verbose) console.log(cached_user);\n    if (cached_user.state == 'fetching') { // cache incomplete, wait\n      if (this._verbose) console.log(\"# incomplete cache, waiting...\".grey);\n      this._authReadyNotify.on(username, function(unexpectedResult) {\n        if (unexpectedResult) {\n          callback(false);\n          return;\n        }\n\n        if (cached_user = cache.get(username)) {\n          cached_user = cache.get(username);\n          callback(cached_user['password'] == password);\n        } else {\n          callback(false);\n        }\n      })\n    } else { // go ahead\n      if (this._verbose) console.log(\"# user is cached\".grey);\n      callback(cached_user['password'] == password);\n    }\n  } else { // nothing is cached, request now\n    if (this._verbose) console.log(\"# RADIUS user is NOT cached, requesting now:\".grey);\n\n    cache.put(username,\n              {'state': 'fetching'},\n              this._creds_ttl*60*1000);\n\n    this._authCallbacks[this._authPacketId] = callback;\n\n    var radiusPacket = {\n      code: \"Access-Request\",\n      secret: this._secret,\n      identifier: this._authPacketId++,\n      attributes: [\n        ['NAS-Identifier', this._nasid],\n        ['User-Name', username],\n        ['User-Password', password]\n      ]\n    };\n\n    var udpClient = dgram.createSocket(\"udp4\");\n    udpClient.bind();\n\n    udpClient.on('message', function(msg, rinfo) {\n      udpClient.close();\n      var response = radius.decode({packet: msg, secret: self._secret});\n\n      if (this._verbose) console.log(response.code);\n      if (response.code == 'Access-Reject') {\n        cached_maybe_incomplete_user = cache.get(username);\n        if (cached_maybe_incomplete_user && cached_maybe_incomplete_user.state != 'current')\n          cache.del(username);\n\n        self._authCallbacks[response.identifier](false);\n        return;\n      }\n\n      cache.put(username,\n                {'password': password, 'state': 'current'},\n                self._creds_ttl*60*1000);\n      self._authReadyNotify.emit(username, false);\n\n      self._authCallbacks[response.identifier](true);\n    });\n\n    try {\n      if (this._verbose) console.log(radiusPacket);\n      var encoded = radius.encode(radiusPacket);\n      udpClient.send(encoded, 0, encoded.length, this._port, this._server);\n    } catch(error) {\n      this._authReadyNotify.emit(username, true);\n      callback(false);\n    }\n  }\n};\n\nRADIUSHelper.prototype.acctAdd = function(packet_length) {\n  // TODO\n}\n\nmodule.exports = RADIUSHelper;\n"}